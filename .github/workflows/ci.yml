name: "CI"
on:
  pull_request:
  push:
  schedule:
    - cron: "15 2 25 * *" #run job on the 25th day of every month on the 15th minute of the 2nd hour

jobs:
  self-test:
    runs-on: ${{ matrix.os }}
    env:
       PLATFORM: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, macos-11 ]
        gemstone: [ 3.7.0, 3.6.6, 3.6.4 ]
    name: ${{ matrix.gemstone }} ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - id: setup-superDoit
        uses: ./
        with:
          gemstone-version: ${{matrix.gemstone}}
          superDoit-branch: 'v2'
      - name: validate_superDoit_setup
        run: |
          echo "GemStone version: ${{ steps.setup-superDoit.outputs.gemstone-version }}"
          echo "GEMSTONE: ${{ steps.setup-superDoit.outputs.gemstone-product-path }}"
          echo "GemStone product name: ${{steps.setup-superDoit.outputs.gemstone-product-name}}"

          echo "Stone directory: ${{steps.setup-superDoit.outputs.stone-directory}}"
          echo ".topazini path: ${{steps.setup-superDoit.outputs.topazini-path}}"
          echo "Stone name: ${{steps.setup-superDoit.outputs.stone-name}}"
          echo "system.conf path: ${{steps.setup-superDoit.outputs.stone-system-conf-path}}"

          echo "GemStone solo version: ${{ steps.setup-superDoit.outputs.solo-version }}"
          echo "GemStone solo product name: ${{steps.setup-superDoit.outputs.solo-product-name}}"

          echo "superDoit project root: ${{ steps.setup-superDoit.outputs.superDoit-root }}"

          echo ${{ steps.setup-superDoit.outputs.superDoit-root }}
          ls -al ${{ steps.setup-superDoit.outputs.superDoit-root }}
          echo ${{ steps.setup-superDoit.outputs.superDoit-root }}/gemstone/products
          ls -al ${{ steps.setup-superDoit.outputs.superDoit-root }}/gemstone/products
          echo ${{ steps.setup-superDoit.outputs.superDoit-root }}/gemstone/solo
          ls -al ${{ steps.setup-superDoit.outputs.superDoit-root }}/gemstone/solo
          echo ${{ steps.setup-superDoit.outputs.stone-directory }}
          ls -al ${{ steps.setup-superDoit.outputs.stone-directory }}
          if [ "${{ steps.setup-superDoit.outputs.gemstone-version }}" = '3.6.1' ] ; then
            if [ "${{ steps.setup-superDoit.outputs.solo-version }}" != '3.6.1' ] ; then
              echo "Expected solo version (${{ steps.setup-superDoit.outputs.solo-version }}) to be 3.6.1"
              exit 1
            fi
          elif [ "${{ steps.setup-superDoit.outputs.gemstone-version }}" = '3.6.0' ] ; then
            if [ "${{ steps.setup-superDoit.outputs.solo-version }}" != '3.6.0' ] ; then
              echo "Expected solo version (${{ steps.setup-superDoit.outputs.solo-version }}) to be 3.6.0"
              exit 1
            fi
          else
            if [ "${{ steps.setup-superDoit.outputs.solo-version }}" != '3.6.1' ] ; then
              # 3.6.1 is the default if gemstone version does not support topaz solo
              echo "Expected solo version (${{ steps.setup-superDoit.outputs.solo-version }}) to be 3.6.1"
              exit 1
            fi
          fi
          # run some superdoit scripts
          . ${{ steps.setup-superDoit.outputs.superDoit-root }}/dev/defPath.env
          export PATH=${{ steps.setup-superDoit.outputs.superDoit-root }}/examples/simple:$PATH

          # .solo scripts
          simple.solo -h
          simple.solo
          versionReport.solo

          # .stone scripts
          export GEMSTONE=${{ steps.setup-superDoit.outputs.gemstone-product-path }}
          export TOPAZINI_PATH=${{steps.setup-superDoit.outputs.topazini-path}}

          echo gslist OUTPUT
          $GEMSTONE/bin/gslist -lc

          simple.stone -h -- -l -I $TOPAZINI_PATH
          simple.stone -- -l -I $TOPAZINI_PATH

          simple.topaz -l -I $TOPAZINI_PATH
#  slack-workflow-status:
#    if: always()
#    name: Post Workflow Status To Slack
#    needs:
#      - self-test
#    runs-on: ubuntu-18.04
#    steps:
#       - name: Slack Workflow Notification
#         uses: Gamesight/slack-workflow-status@master
#         with:
#          repo_token: ${{secrets.GITHUB_TOKEN}}
#          slack_webhook_url: ${{secrets.SLACK_DALEHENRICH}}
#          name: 'action run' 
